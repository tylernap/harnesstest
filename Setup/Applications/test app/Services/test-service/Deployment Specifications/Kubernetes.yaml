harnessApiVersion: '1.0'
type: KUBERNETES
advancedConfig: |
  # Enter your Controller YAML spec below.
  #
  # Supported Controllers:
  #   ReplicationController
  #   Deployment
  #   ReplicaSet
  #   StatefulSet
  #   DaemonSet
  #
  # Placeholders:
  #
  # Required: ${DOCKER_IMAGE_NAME}
  #   - Replaced with the Docker image name and tag
  #
  # Optional: ${CONTAINER_NAME}
  #   - Replaced with a container name based on the image name
  #
  # Optional: ${CONFIG_MAP_NAME}
  #   - Replaced with the ConfigMap name (same as controller name)
  #     Config map contains all unencrypted service variables and
  #     all unencrypted config files, unless a custom
  #     config map is provided
  #
  # Optional: ${SECRET_MAP_NAME}
  #   - Replaced with the Secret name (same as controller name)
  #     Secret map contains all encrypted service variables and
  #     all encrypted config files
  #
  # Optional: ${SECRET_NAME}
  #   - Replaced with the name of the generated image pull
  #     secret when pulling from a private Docker registry
  #
  # Harness will set the controller name, namespace,
  # selector labels, and number of replicas.
  #
  # Service variables will be merged into environment
  # variables for all containers, overriding values if
  # the name is the same.
  #
  # ---
  apiVersion: "extensions/v1beta1"
  kind: "Deployment"
  metadata:
    annotations: {}
    finalizers: 
    labels: {}
    ownerReferences: 
  spec:
    replicas: 0
    template:
      metadata:
        annotations: {}
        finalizers: 
        labels: {}
        ownerReferences: 
      spec:
        containers:
        - args: 
          command: 
          env: 
          envFrom: 
          image: "${DOCKER_IMAGE_NAME}"
          name: "${CONTAINER_NAME}"
          ports:
          - containerPort: 8080
            hostPort: 80
            protocol: "TCP"
          resources:
            limits:
              memory: "512Mi"
              cpu: "1"
            requests:
              memory: "256Mi"
              cpu: "100m"
          volumeMounts: 
        hostAliases: 
        imagePullSecrets:
        - name: "${SECRET_NAME}"
        initContainers: 
        nodeSelector: {}
        tolerations: 
        volumes: 
